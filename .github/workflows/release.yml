name: Create Release

on:
  workflow_dispatch:

jobs:
  build:
    name: Build (${{ matrix.name }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: linux-x86_64
            runner: ubuntu-24.04
          - name: windows-x86_64
            runner: windows-2025
          - name: linux-aarch64
            runner: ubuntu-24.04-arm

    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.2.6

      - name: Install Deps
        run: deno task install

      - name: Compile
        run: deno task compile

      - name: Read version
        id: get_version
        run: echo "version=$(jq -r .version deno.json)" >> "$GITHUB_OUTPUT"

      - name: Zip output
        run: zip -j ifc2frag-cli-v${{ steps.get_version.outputs.version }}-${{ matrix.name }}.zip dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ifc2frag-cli-v${{ steps.get_version.outputs.version }}-${{ matrix.name }}.zip
          path: ifc2frag-cli-v*.zip

  tag:
    name: Create Tag
    runs-on: ubuntu-latest
    needs: build
    outputs:
      version: ${{ needs.build.outputs.version }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Check if tag already exists
        run: |
          if git rev-parse "v${{ needs.build.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag already exists"
            exit 1
          fi

      - name: Create and push tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "v${{ needs.build.outputs.version }}"
          git push origin "v${{ needs.build.outputs.version }}"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: tag
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.tag.outputs.version }}
          files: dist/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
